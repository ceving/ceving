(define (write-sxml sxml port)
  (cond
   ((string? sxml)
    (display sxml port))
   ((pair? sxml)
    (let ((element (car sxml))
          (nodes (cdr sxml)))
      (display #\< port)
      (display element port)
      (if (and (pair? nodes)
               (pair? (car nodes))
               (symbol=? '@ (caar nodes)))
          (let ((attributes (caadr nodes)))
            (for-each
             (lambda (attribute)
               (display #\space port)
               (display (car attribute) port)
               (for-each
                (lambda (value)
                  (display #\= port)
                  (display #\" port)
                  (display value port)
                  (display #\" port))
                (cdr attribute)))
             attributes)
            (set! nodes (cdr nodes))))
      (if (null? nodes)
          (display #\/ port)
          (begin
            (display #\> port)
            (for-each
             (lambda (child) (write-sxml child port))
             nodes)
            (display #\< port)
            (display #\/ port)
            (display element port)))
      (display #\> port)))
   (error "invalid argument type" sxml)))

(define (svg port)
  ((lambda (sxml)
     (write-sxml sxml port))
   '(tag (@ (attr1 "value1")
            (attr2 "value2"))
         (nested "Text node")
         (empty))))

(call-with-port (open-output-file "out.svg") svg)

(let ((port (open-output-string)))
  (call-with-port port svg)
  (display (get-output-string port))
  (newline))


(let ((s "test")
      (n 1000))
  (let loop ((i 0))
    (if (and (string=? s (let ((p (open-output-string)))
                           (call-with-port p (lambda (p) (write-string s p)))
                           (get-output-string p)))
             (< i n))
        (loop (+ i 1))
        i)))
