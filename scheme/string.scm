(define (split-string input-string delimiter?)
  (let ((input-port (open-input-string input-string)))
    (let loop ((current-sub-string (open-output-string))
               (found-sub-strings '()))
      (let ((char (read-char input-port)))
        (cond ((eof-object? char)
               (reverse (cons (get-output-string current-sub-string)
                              found-sub-strings)))
              ((delimiter? char)
               (loop (open-output-string)
                     (cons (get-output-string current-sub-string)
                           found-sub-strings)))
              (else
               (write-char char current-sub-string)
               (loop current-sub-string found-sub-strings)))))))

#;(begin
  (let ((space? (lambda (char) (char=? char #\space))))
    (test* split-string
           (("abc def" space?) '("abc" "def"))
           ((" " space?) '("" ""))
           (("a" space?) '("a"))
           (("" space?) '(""))
           ((" a" space?) '("" "a"))
           (("a " space?) '("a" ""))
           (("  " space?) '("" "" ""))))
  )
